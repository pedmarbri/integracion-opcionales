{"version":3,"sources":["../../src/deployments/updateDeployment.js"],"names":["fetch","require","platformConfig","currentVersion","version","updateDeployment","data","body","deployment","status","state","service","name","backendUrl","tenant","app","serviceName","deploymentId","method","JSON","stringify","headers","Authorization","accessKey","response","ok","text","Error","json"],"mappings":";;;;;;;;AAAA,IAAMA,QAAQC,QAAQ,kBAAR,CAAd;AACA,IAAMC,iBAAiBD,QAAQ,WAAR,CAAvB;AACA,IAAME,iBAAiBF,QAAQ,oBAAR,EAA8BG,OAArD;;AAEA,IAAMC;AAAA,qEAAmB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,gBADiB,GACV;AACXC,0BAAY;AACVC,wBAAQH,KAAKG;AADH;AADD,aADU;;AAMvB,gBAAIH,KAAKI,KAAL,IAAcJ,KAAKI,KAAL,CAAWC,OAAzB,IAAoCL,KAAKI,KAAL,CAAWC,OAAX,CAAmBC,IAA3D,EAAiE;AAC/DL,mBAAKG,KAAL,GAAaJ,KAAKI,KAAlB;AACD;AARsB;AAAA,mBASAV,MACpB,GAAEE,eAAeW,UAAW,WAAUP,KAAKQ,MAAO,iBAAgBR,KAAKS,GAAI,aAC1ET,KAAKU,WACN,gBAAeV,KAAKW,YAAa,EAHb,EAIrB;AACEC,sBAAQ,KADV;AAEEX,oBAAMY,KAAKC,SAAL,CAAeb,IAAf,CAFR;AAGEc,uBAAS;AACP,gCAAgB,kBADT;AAEP,sCAAsBlB,cAFf;AAGPmB,+BAAgB,UAAShB,KAAKiB,SAAU;AAHjC;AAHX,aAJqB,CATA;;AAAA;AASjBC,oBATiB;;AAAA,gBAwBlBA,SAASC,EAxBS;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAyBFD,SAASE,IAAT,EAzBE;;AAAA;AAyBfA,gBAzBe;AAAA,kBA0Bf,IAAIC,KAAJ,CAAUD,IAAV,CA1Be;;AAAA;AAAA,6CA6BhBF,SAASI,IAAT,EA7BgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAgCevB,gB","file":"updateDeployment.js","sourcesContent":["const fetch = require('isomorphic-fetch')\nconst platformConfig = require('../config')\nconst currentVersion = require('../../package.json').version\n\nconst updateDeployment = async (data) => {\n  const body = {\n    deployment: {\n      status: data.status\n    }\n  }\n  if (data.state && data.state.service && data.state.service.name) {\n    body.state = data.state\n  }\n  const response = await fetch(\n    `${platformConfig.backendUrl}tenants/${data.tenant}/applications/${data.app}/services/${\n      data.serviceName\n    }/deployments/${data.deploymentId}`,\n    {\n      method: 'PUT',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        'x-platform-version': currentVersion,\n        Authorization: `bearer ${data.accessKey}`\n      }\n    }\n  )\n\n  if (!response.ok) {\n    const text = await response.text()\n    throw new Error(text)\n  }\n\n  return response.json()\n}\n\nexport default updateDeployment\n"]}